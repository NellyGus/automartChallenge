{"version":3,"sources":["../../server/controllers/car_controller.js"],"names":["CarController","request","response","car","id","car_model","length","owner","created_on","Date","state","body","trim","replace","status","price","manufacturer","model","year","more_description","push","send","message","cars","found","find","parseInt","params","car_id","query","filtered","filter","res","data","min_price","max_price","targetIndex","indexOf","splice","carController"],"mappings":"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","file":"car_controller.js","sourcesContent":["import car_model from '../model/car_model';\r\n\r\nclass CarController {\r\n    postCar(request, response){\r\n                const car= {\r\n                    id: car_model.length + 1,\r\n                    owner: 2,\r\n                    created_on: new Date(),\r\n                    state: request.body.state.trim().replace(/\\s+/g, ''),\r\n                    status: request.body.status.trim().replace(/\\s+/g, ''),\r\n                    price: request.body.price,\r\n                    manufacturer: request.body.manufacturer,\r\n                    model: request.body.model,\r\n                    year: request.body.year,\r\n                    more_description: request.body.more_description\r\n                }\r\n                car_model.push(car);\r\n    \r\n                return response.status(201).send({\r\n                    status: 201,\r\n                    message: 'car added successfully',\r\n                    car\r\n                });           \r\n    } \r\n    getAllCars(request, response) {\r\n        return response.status(200).send({\r\n            status: 200,\r\n            cars: car_model\r\n        });\r\n    }\r\n    getCarById(request, response){\r\n        const found = car_model.find((car) => {\r\n            return car.id === parseInt(request.params.car_id);\r\n        });\r\n        if(found){\r\n            response.status(200).send({\r\n                status : 200,\r\n                car: found\r\n            })\r\n        }else{\r\n            response.status(404).send({\r\n                status: 404,\r\n                message: 'Car not found'\r\n            });\r\n        }      \r\n    }\r\n    \r\n    searchCars(request, response){\r\n        const {query} = request;\r\n\r\n        if(query.status){\r\n            const filtered= car_model.filter(car => car.status=== request.query.status);\r\n            if (filtered.length === 0) {\r\n                return res.status(200).send({\r\n                  status: 200,\r\n                  data: 'Not found',\r\n                });\r\n              }\r\n        \r\n              return response.status(200).send({\r\n                status: 200,\r\n                data: filtered,\r\n              });\r\n        }\r\n        if(query.status && query.manufacturer){\r\n            const filtered= car_model.filter(car => car.status=== query.status && car.manufacturer=== query.manufacturer);\r\n            if (filtered.length === 0) {\r\n                return res.status(200).send({\r\n                  status: 200,\r\n                  data: 'Not found',\r\n                });\r\n              }\r\n        \r\n              return response.status(200).send({\r\n                status: 200,\r\n                data: filtered,\r\n              });\r\n        }\r\n        if(query.status && query.state){\r\n            const filtered= car_model.filter(car => car.status=== query.status && car.state=== query.state); \r\n            if (filtered.length === 0) {\r\n                return res.status(200).send({\r\n                  status: 200,\r\n                  data: 'Not found',\r\n                });\r\n              }\r\n        \r\n              return response.status(200).send({\r\n                status: 200,\r\n                data: filtered,\r\n              });\r\n        }\r\n        if(query.status && query.min_price && query.max_price){\r\n            const filtered= car_model.filter(car => car.status=== query.status && car.price >= query.min_price && car.price <= query.max_price);\r\n            if (filtered.length === 0) {\r\n                return res.status(200).send({\r\n                  status: 200,\r\n                  data: 'Not found',\r\n                });\r\n              }\r\n        \r\n              return response.status(200).send({\r\n                status: 200,\r\n                data: filtered,\r\n              });\r\n        }\r\n    }\r\n\r\n    updatePrice(request, response){\r\n        const found = car_model.find((car) => {\r\n            return car.id === parseInt(request.params.car_id);\r\n        });\r\n        if(found){\r\n            const car= found;\r\n            car.price= request.body.price;\r\n            return response.status(200).send({\r\n                status: 200,\r\n                car\r\n            });            \r\n        }else{\r\n            return response.status(404).send({\r\n                status: 404,\r\n                message: 'Car not found'\r\n            });\r\n        } \r\n\r\n    }\r\n    updateStatus(request, response){\r\n        const found = car_model.find((car) => {\r\n            return car.id === parseInt(request.params.car_id);\r\n        });\r\n        if(found){\r\n            const car= found;\r\n            car.status= request.body.status;\r\n            return response.status(200).send({\r\n                status: 200,\r\n                data: car\r\n            });\r\n        }else{\r\n            return response.status(404).send({\r\n                status: 404,\r\n                message: 'Car not found'\r\n            });\r\n        }\r\n    }\r\n    deleteCar(request, response){\r\n        const found = car_model.find((car) => {\r\n            return car.id === parseInt(request.params.car_id);\r\n        });\r\n        if(found){\r\n            const targetIndex= car_model.indexOf(found);\r\n            car_model.splice(targetIndex, 1);\r\n            return response.status(200).send({\r\n                status: 200,\r\n                message: 'Car deleted successfully'\r\n            });\r\n        }else{\r\n            return response.status(404).send({\r\n                status: 404,\r\n                message: 'Car not found'\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst carController = new CarController();\r\nexport default carController;"]}