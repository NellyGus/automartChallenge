{"version":3,"sources":["../../server/controllers/user_controller.js"],"names":["saltRounds","UserController","request","response","bcrypt","hash","body","password","err","newUser","id","user_model","length","email","first_name","last_name","address","is_admin","push","token","jwt","sign","JWT_SECRET","expiresIn","status","send","message","found","some","user","error","findEmail","find","compare","result","json","data","firstname","lastname","userController"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAY,CAAlB;;IAEMC,c;;;;;;;sCACYC,O,EAASC,Q,EAAU;AAC7BC,6BAAOC,IAAP,CAAYH,QAAQI,IAAR,CAAaC,QAAzB,EAAmCP,UAAnC,EAA+C,UAACQ,GAAD,EAAMH,IAAN,EAAe;AAC1D,oBAAMI,UAAS;AACXC,wBAAIC,qBAAWC,MAAX,GAAoB,CADb;AAEXC,2BAAOX,QAAQI,IAAR,CAAaO,KAFT;AAGXC,gCAAYZ,QAAQI,IAAR,CAAaQ,UAHd;AAIXC,+BAAWb,QAAQI,IAAR,CAAaS,SAJb;AAKXR,8BAAUF,IALC;AAMXW,6BAASd,QAAQI,IAAR,CAAaU,OANX;AAOXC,8BAAU;AAPC,iBAAf;AASAN,qCAAWO,IAAX,CAAgBT,OAAhB;;AAEA,oBAAMU,QAAQC,uBAAIC,IAAJ,CAAS,EAAEZ,gBAAF,EAAT,EAAsBa,kBAAtB,EAAmC,EAAEC,WAAW,KAAG,IAAhB,EAAnC,CAAd;;AAEA,uBAAOpB,SAASqB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC7BD,4BAAQ,GADqB;AAE7BE,6BAAS,8BAFoB;AAG7BP,gCAH6B;AAI7BV;AAJ6B,iBAA1B,CAAP;AAMH,aApBD;AAqBH;;;8BACKP,O,EAASC,Q,EAAU;AAAA,gCACOD,QAAQI,IADf;AAAA,gBACbO,KADa,iBACbA,KADa;AAAA,gBACNN,QADM,iBACNA,QADM;;AAGrB;;AACA,gBAAMoB,QAAQhB,qBAAWiB,IAAX,CAAgB;AAAA,uBAAQC,KAAKhB,KAAL,KAAeA,KAAvB;AAAA,aAAhB,CAAd;;AAEA,gBAAI,CAACc,KAAL,EAAY;AACV,uBAAOxB,SAASqB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,4BAAQ,GADuB;AAE/BM,2BAAO;AAFwB,iBAA1B,CAAP;AAID;;AAED;AACA,gBAAMC,YAAY,SAAZA,SAAY;AAAA,uBAASpB,qBAAWqB,IAAX,CAAgB;AAAA,2BAAQH,KAAKhB,KAAL,KAAeA,KAAvB;AAAA,iBAAhB,CAAT;AAAA,aAAlB;;AAEA,gBAAMgB,OAAOE,UAAUlB,KAAV,CAAb;;AAEA,gBAAMM,QAAQC,uBAAIC,IAAJ,CAAS,EAAEQ,UAAF,EAAT,EAAmBP,kBAAnB,EAAgC,EAAEC,WAAW,KAAG,EAAhB,EAAhC,CAAd;;AAGA;AACAnB,6BAAO6B,OAAP,CAAe1B,QAAf,EAAyBsB,KAAKtB,QAA9B,EAAwC,UAACC,GAAD,EAAM0B,MAAN,EAAiB;AACrD,oBAAG,CAACA,MAAJ,EAAW;AACP/B,6BAASqB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACtBD,gCAAQ,GADc;AAEtBM,+BAAO;AAFe,qBAA1B;AAIH,iBALD,MAKK;AACD,2BAAO3B,SAASqB,MAAT,CAAgB,GAAhB,EAAqBW,IAArB,CAA0B;AAC7BX,gCAAQ,GADqB;AAE7BY,8BAAM;AACJjB,wCADI;AAEJT,gCAAImB,KAAKnB,EAFL;AAGJ2B,uCAAWR,KAAKf,UAHZ;AAIJwB,sCAAUT,KAAKd,SAJX;AAKJF,mCAAOgB,KAAKhB;AALR;AAFuB,qBAA1B,CAAP;AAUH;AACJ,aAlBD;AAmBD;;;;;;AAEP,IAAM0B,iBAAiB,IAAItC,cAAJ,EAAvB;kBACesC,c","file":"user_controller.js","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport user_model from '../model/user_model';\r\nimport {JWT_SECRET} from '../config';\r\n\r\nconst saltRounds= 3;\r\n\r\nclass UserController{\r\n    createAccount(request, response) {\r\n        bcrypt.hash(request.body.password, saltRounds, (err, hash) => {\r\n            const newUser= {\r\n                id: user_model.length + 1,\r\n                email: request.body.email,\r\n                first_name: request.body.first_name,\r\n                last_name: request.body.last_name,\r\n                password: hash,\r\n                address: request.body.address,\r\n                is_admin: false\r\n            }\r\n            user_model.push(newUser);\r\n\r\n            const token = jwt.sign({ newUser }, JWT_SECRET , { expiresIn: 60*1440 });\r\n\r\n            return response.status(201).send({\r\n                status: 201,\r\n                message: 'Account created successfully',\r\n                token,\r\n                newUser\r\n            })\r\n        });\r\n    }\r\n    login(request, response) {\r\n        const { email, password } = request.body;\r\n    \r\n        // Check if email is present in Users array\r\n        const found = user_model.some(user => user.email === email);\r\n    \r\n        if (!found) {\r\n          return response.status(400).send({\r\n            status: 400,\r\n            error: 'Email not found',\r\n          });\r\n        }\r\n    \r\n        // Get User using the email\r\n        const findEmail = email => user_model.find(user => user.email === email);\r\n\r\n        const user = findEmail(email);\r\n\r\n        const token = jwt.sign({ user }, JWT_SECRET , { expiresIn: 60*60 });\r\n\r\n    \r\n        // Compare password\r\n        bcrypt.compare(password, user.password, (err, result) => {\r\n            if(!result){\r\n                response.status(400).send({\r\n                    status: 400,\r\n                    error: 'Password is incorrect',\r\n                  });\r\n            }else{\r\n                return response.status(200).json({\r\n                    status: 200,\r\n                    data: {\r\n                      token,  \r\n                      id: user.id,\r\n                      firstname: user.first_name,\r\n                      lastname: user.last_name,\r\n                      email: user.email                      \r\n                    },\r\n                  }); \r\n            }\r\n        });\r\n      }\r\n}\r\nconst userController = new UserController();\r\nexport default userController;\r\n\r\n\r\n"]}