{"version":3,"sources":["../../server/test/user_test.js"],"names":["chai","use","chaiHttp","done","request","app","post","set","send","first_name","last_name","password","address","email","end","err","res","statusCode","to","equal","body","be","an","status","newUser","token","a","id","assert","strictEqual","isObject","isString","isNumber","isNull","equals","error"],"mappings":"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","file":"user_test.js","sourcesContent":["import chai from 'chai';\r\nimport { expect, assert } from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport { describe, it } from 'mocha';\r\nimport app from '../server';\r\n\r\nchai.use(chaiHttp);\r\n\r\ndescribe('test signup endpoint', () => {\r\n    it('should create a user', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: 'nelima',\r\n            last_name: 'augustin',\r\n            password: 'nelimaaugustin1234',\r\n            address: '208, BKK, Bè-Klikame',\r\n            email: 'baugustino12@gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equal(201);\r\n            expect(res.body.newUser).to.be.an('object');\r\n            expect(res.body.token).to.be.a('string');\r\n            expect(res.body.newUser.id).to.be.an('number');\r\n            expect(res.body.newUser.first_name).to.be.a('string');\r\n            expect(res.body.newUser.last_name).to.be.a('string');\r\n            expect(res.body.newUser.password).to.be.a('string');\r\n            expect(res.body.newUser.address).to.be.a('string');\r\n            expect(res.body.newUser.email).to.be.a('string');\r\n            assert.strictEqual(res.statusCode, 201, 'Status code is not 201');\r\n            assert.strictEqual(res.body.status, 201, 'Status is not 201');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.isObject(res.body.newUser, 'Data is not an object');\r\n            assert.isString(res.body.token, 'Token is not a string');\r\n            assert.isNumber(res.body.newUser.id, 'ID is not a number');\r\n            assert.isString(res.body.newUser.first_name, 'Firstname is not a string');\r\n            assert.isString(res.body.newUser.last_name, 'Lastname is not a string');\r\n            assert.isString(res.body.newUser.password, 'Password is not a string');\r\n            assert.isString(res.body.newUser.address, 'Adress is not a string');\r\n            assert.isString(res.body.newUser.email, 'Email is not a string');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      it('Should return an error message if firstname is empty', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: '',\r\n            last_name: 'augustin',\r\n            password: 'nelimaaugustin1234',\r\n            address: '208, BKK, Bè-Klikame',\r\n            email: 'baugustino12@gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('firstname or lastname is required');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'firstname or lastname is required',\r\n              'Expect error to be firstname or lastname is required');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      it('Should return an error message if firstname contain a number', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: 'nelima94',\r\n            last_name: 'augustin',\r\n            password: 'nelimaaugustin1234',\r\n            address: '208, BKK, Bè-Klikame',\r\n            email: 'baugustino12@gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('firstname or lastname cannot contain number');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'firstname or lastname cannot contain number',\r\n              'Expect error to be firstname or lastname cannot contain number');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n    \r\n      it('Should return an error message if firstname is less than 3 characters', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: 'ne',\r\n            last_name: 'augustin',\r\n            password: 'nelimaaugustin1234',\r\n            address: '208, BKK, Bè-Klikame',\r\n            email: 'baugustino12@gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('firstname or lastname cannot be less than 3 characters');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'firstname or lastname cannot be less than 3 characters',\r\n              'Expect error to be firstname or lastname cannot be less than 3 characters');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n    \r\n      it('Should return an error message if lastname is empty', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: 'nelima',\r\n            last_name: '',\r\n            password: 'nelimaaugustin1234',\r\n            address: '208, BKK, Bè-Klikame',\r\n            email: 'baugustino12@gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('firstname or lastname is required');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'firstname or lastname is required',\r\n              'Expect error to be firstname or lastname is required');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n    \r\n      it('Should return an error message if lastname is less than 3 characters', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: 'nelima',\r\n            last_name: 'au',\r\n            password: 'nelimaaugustin1234',\r\n            address: '208, BKK, Bè-Klikame',\r\n            email: 'baugustino12@gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('firstname or lastname cannot be less than 3 characters');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'firstname or lastname cannot be less than 3 characters',\r\n              'Expect error to be firstname or lastname cannot be less than 3 characters');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n    \r\n      it('Should return an error message if password is empty', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: 'nelima',\r\n            last_name: 'augustin',\r\n            password: '',\r\n            address: '208, BKK, Bè-Klikame',\r\n            email: 'baugustino12@gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('password is required');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'password is required',\r\n              'Expect error to be password is required');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n    \r\n      it('Should return an error message if password is less than 6 characters', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: 'nelima',\r\n            last_name: 'augustin',\r\n            password: 'neli',\r\n            address: '208, BKK, Bè-Klikame',\r\n            email: 'baugustino12@gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.body.error).to.equals('password cannot be less than 6 characters');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'password cannot be less than 6 characters',\r\n              'Expect error to be password cannot be less than 6 characters');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n    \r\n      it('Should return an error message if email is not valid', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: 'nelima',\r\n            last_name: 'augustin',\r\n            password: 'nelimaaugustin1234',\r\n            address: '208, BKK, Bè-Klikame',\r\n            email: 'baugustino12gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('provide a valid email address, please');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'provide a valid email address, please',\r\n              'Expect error to be provide a valid email address, please');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n      it('Should return an error message if address is empty', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .set({\r\n            'Content-type': 'application/json',\r\n          })\r\n          .send({\r\n            first_name: 'nelima',\r\n            last_name: 'augustin',\r\n            password: 'nelimaaugustin1234',\r\n            address: '',\r\n            email: 'baugustino12@gmail.com'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('address is required');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'address is required',\r\n              'Expect error to be address is required');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    \r\n"]}