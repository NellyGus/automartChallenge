{"version":3,"sources":["../../server/test/car_test.js"],"names":["chai","use","chaiHttp","carAd","before","done","request","app","post","set","Authorization","send","state","status","price","manufacturer","model","year","end","err","res","body","car","statusCode","to","equal","be","an","id","a","created_on","assert","strictEqual","isObject","isNumber","isString","isNull","error","equals","get","data","isArray","cars","delete","message"],"mappings":"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+BD,KAA/B,CAAqC,0BAArC;AACA,wBAAOL,IAAIC,IAAJ,CAASuB,OAAhB,EAAyBpB,EAAzB,CAA4BE,EAA5B,CAA+BG,CAA/B,CAAiC,QAAjC;AACAE,mBAAOE,QAAP,CAAgBb,IAAIC,IAApB,EAA0B,2BAA1B;AACAU,mBAAOC,WAAP,CAAmBZ,IAAIG,UAAvB,EAAmC,GAAnC,EAAwC,wBAAxC;AACAQ,mBAAOI,QAAP,CAAgBf,IAAIC,IAAJ,CAASuB,OAAzB,EAAkC,sBAAlC;AACAb,mBAAOC,WAAP,CAAmBZ,IAAIC,IAAJ,CAASuB,OAA5B,EACE,0BADF,EAEE,+CAFF;AAGAb,mBAAOK,MAAP,CAAcjB,GAAd,EAAmB,2BAAnB;AACAd;AACD,KApBH;AAqBD,GAtBD;;AAwBD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGH,CArqBD","file":"car_test.js","sourcesContent":["import chai from 'chai';\r\nimport { expect, assert } from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport { describe, it } from 'mocha';\r\nimport app from '../server';\r\n\r\nchai.use(chaiHttp);\r\n\r\ndescribe('test car ad endpoint', () => {\r\nlet carAd;\r\n  before((done) => {\r\n    chai\r\n      .request(app)\r\n      .post('/api/v1/car')\r\n      .set({\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n      })\r\n      .send({\r\n        state: 'use' ,\r\n        status: 'available' ,\r\n        price: 2500,\r\n        manufacturer: 'Toyota',\r\n        model: 'corolla' ,\r\n        year: 2012\r\n      })\r\n      .end((err, res) => {\r\n        carAd = res.body.car;\r\n        done();\r\n      });\r\n  });\r\n\r\n  //create ad\r\n    it('should create an ad', (done) => {\r\n        chai\r\n        .request(app)\r\n        .post('/api/v1/car')\r\n        .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n        }).send({\r\n            state: 'use' ,\r\n            status: 'available',\r\n            price: 2500,\r\n            manufacturer: 'Toyota',\r\n            model: 'corolla',\r\n            year: 2012\r\n        }).end((err, res) => {\r\n            expect(res.statusCode).to.equal(201);\r\n            expect(res.body.status).to.equal(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.car).to.be.an('object');\r\n            expect(res.body.car.id).to.be.a('number');\r\n            //expect(res.body.car.owner).to.be.a('number');\r\n            expect(res.body.car.created_on).to.be.a('string'); \r\n            expect(res.body.car.state).to.be.a('string');\r\n            expect(res.body.car.status).to.be.a('string');\r\n            expect(res.body.car.price).to.be.a('number');\r\n            expect(res.body.car.manufacturer).to.be.a('string'); \r\n            expect(res.body.car.model).to.be.a('string');\r\n            expect(res.body.car.year).to.be.a('number');\r\n            //expect(res.body.car.more_description).to.be.a('string');\r\n            assert.strictEqual(res.statusCode, 201, 'status code is not 201');\r\n            assert.strictEqual(res.status, 201, 'status is not 201');\r\n            assert.isObject(res.body, 'response is not an object');\r\n            assert.isObject(res.body.car, 'car is not an object');\r\n            assert.isNumber(res.body.car.id, 'id is not a number');\r\n            //assert.isNumber(res.body.owner, 'owner is not a number');\r\n            assert.isString(res.body.car.created_on, 'date is not a string');\r\n            assert.isString(res.body.car.state, 'state is not a string');\r\n            assert.isString(res.body.car.status, 'status is not a string');\r\n            assert.isNumber(res.body.car.price, 'price is not a number'); \r\n            assert.isString(res.body.car.manufacturer, 'manufacturer is not a string');\r\n            assert.isString(res.body.car.model, 'model is not a string');\r\n            assert.isNumber(res.body.car.year, 'year is not a number');\r\n            //assert.isString(res.body.car.more_description, 'more description is not a string');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n    });\r\n\r\n    // request not authorized\r\n    it('Should return an error if request is not authorized', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n          })\r\n          .send({\r\n            state: 'use' ,\r\n            status: 'available',\r\n            price: '2500',\r\n            manufacturer: 'Toyota',\r\n            model: 'corolla',\r\n            year: '2012'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(401);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equal(401);\r\n            expect(res.body.error).to.equal('Authentication failed! Please Login again');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 401, 'Status code is not 401');\r\n            assert.strictEqual(res.body.status, 401, 'Status is not 401');\r\n            assert.strictEqual(res.body.error,\r\n              'Authentication failed! Please Login again',\r\n              'Expect error to be Authentication failed! Please Login again');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // not valid token\r\n      it('Should return an error if token is not valid', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOivIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXb20iLCJmaXJzdF9uYW1lIjoibmV2aWxsZSIsImxhc3RfbmFtZSI6IkF1Z3VzdGluIiwicGFzc3dvcmQiOiIkMmIkMDQkSzAvYWtHOGJOUnZ3cFJ3TU52cmJhLlpMM3RkZUdSVURDUTQ5dHpaT0tpdmUyQ21qWkcybG0iLCJhZGRyZXNzIjoiMjA4IFJ1ZSBCS0ssIELDqC1LbGlrYW1lIiwiaXNfYWRtaW4iOmZhbHNlfSwiaWF0IjoxNTYwMDk3NDMyLCJleHAiOjE1NjAxODM4MzJ9.u8IywIdkC6WWpOChA97vO94ix2prnkj3-VdpkB57CgI',\r\n          })\r\n          .send({\r\n            state: 'use' ,\r\n            status: 'available',\r\n            price: '2500',\r\n            manufacturer: 'Toyota',\r\n            model: 'corolla',\r\n            year: 2012\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(401);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equal(401);\r\n            expect(res.body.error).to.equal('Authentication failed! Please Login again');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 401, 'Status code is not 401');\r\n            assert.strictEqual(res.body.status, 401, 'Status is not 401');\r\n            assert.strictEqual(res.body.error,\r\n              'Authentication failed! Please Login again',\r\n              'Expect error to be Authentication failed! Please Login again');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // Manufacturer cannot contain number\r\n      it('Should return an error message if manufacturer field contains a number', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .send({\r\n            state: 'use' ,\r\n            status: 'available',\r\n            price: '2500',\r\n            manufacturer: 'manufacturer2012',\r\n            model: 'corolla',\r\n            year: 2012\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('car manufacturer cannot contain number');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'car manufacturer cannot contain number',\r\n              'Expect error to be car manufacturer cannot contain number');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // model cannot be empty\r\n      it('Should return an error message if model field is empty', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .send({\r\n            state: 'use' ,\r\n            status: 'available',\r\n            price: '2500',\r\n            manufacturer: 'BMW',\r\n            model: '',\r\n            year: 2012\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('Car model is required');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'Car model is required',\r\n              'Expect error to be Car model is required');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // state cannot be empty\r\n      it('Should return an error message if car state field is empty', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .send({\r\n            state: '' ,\r\n            status: 'available',\r\n            price: '2500',\r\n            manufacturer: 'BMW',\r\n            model: '',\r\n            year: 2012\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('Car state is required');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'Car state is required', 'Expect error to be Car state is required');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // state cannot contain number\r\n      it('Should return an error message if car state contains number', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .send({\r\n            state: 'use70' ,\r\n            status: 'available',\r\n            price: '2500',\r\n            manufacturer: 'BMW',\r\n            model: 'model',\r\n            year: 2012\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('Car state cannot contain number');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'Car state cannot contain number', 'Expect error to be Car state cannot contain number');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // year cannot be empty\r\n      it('Should return an error message if year field is empty', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .send({\r\n            state: 'use' ,\r\n            status: 'available',\r\n            price: '2500',\r\n            manufacturer: 'BMW',\r\n            model: 'model',\r\n            year: ''\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('Enter a valid year, please');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'Enter a valid year, please', 'Expect error to be Enter a valid year, please');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n      \r\n      // year not less or more than 4 digits\r\n      it('Should return an error message if year is less or more than 4 digits', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .send({\r\n            state: 'use' ,\r\n            status: 'available',\r\n            price: '2500',\r\n            manufacturer: 'BMW',\r\n            model: 'model',\r\n            year: '410'\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('Enter a valid year, please');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'Enter a valid year, please', 'Expect error to be Enter a valid year, please');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // price should be a number\r\n      it('Should return an error message if price is not number', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .send({\r\n            state: 'use' ,\r\n            status: 'available',\r\n            price: 'price',\r\n            manufacturer: 'BMW',\r\n            model: 'model',\r\n            year: 2012\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('price is invalid');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'price is invalid', 'Expect error to be price is invalid');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // status should not contain number\r\n      it('Should return an error message if status contains number', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/car')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .send({\r\n            state: 'use' ,\r\n            status: 'available77',\r\n            price: '2500',\r\n            manufacturer: 'BMW',\r\n            model: 'model',\r\n            year: 2012\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equals(400);\r\n            expect(res.statusCode).to.equal(400);\r\n            expect(res.body.error).to.equals('Status cannot contain number');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n            assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n            assert.strictEqual(res.body.error,\r\n              'Status cannot contain number', 'Expect error to be Status cannot contain number');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // status cannot be empty\r\n      // it('Should return an error message if status field is empty', (done) => {\r\n      //   chai\r\n      //     .request(app)\r\n      //     .post('/api/v1/car')\r\n      //     .set({\r\n      //       'Content-Type': 'application/json',\r\n      //       Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjoyLCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoibmV2aWxsZSIsImxhc3RfbmFtZSI6IkF1Z3VzdGluIiwicGFzc3dvcmQiOiIkMmIkMDQkSzAvYWtHOGJOUnZ3cFJ3TU52cmJhLlpMM3RkZUdSVURDUTQ5dHpaT0tpdmUyQ21qWkcybG0iLCJhZGRyZXNzIjoiMjA4IFJ1ZSBCS0ssIELDqC1LbGlrYW1lIiwiaXNfYWRtaW4iOmZhbHNlfSwiaWF0IjoxNTYwMDk3NDMyLCJleHAiOjE1NjAxODM4MzJ9.u8IywIdkC6WWpOChA97vO94ix2prnkj3-VeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8kdpkB57CgI',\r\n      //     })\r\n      //     .send({\r\n      //       state: 'use' ,\r\n      //       status: '',\r\n      //       price: '2500',\r\n      //       manufacturer: 'BMW',\r\n      //       model: 'model',\r\n      //       year: 2012\r\n      //     })\r\n      //     .end((err, res) => {\r\n      //       expect(res.body).to.be.an('object');\r\n      //       expect(res.body.status).to.equals(400);\r\n      //       expect(res.statusCode).to.equal(400);\r\n      //       expect(res.body.error).to.equals('Status is required');\r\n      //       assert.isObject(res.body, 'Response is not an object');\r\n      //       assert.strictEqual(res.statusCode, 400, 'Status code is not 400');\r\n      //       assert.strictEqual(res.body.status, 400, 'Status is not 400');\r\n      //       assert.strictEqual(res.body.error,\r\n      //         'Status is required', 'Expect error to be Status is required');\r\n      //       assert.isNull(err, 'Expect error to not exist');\r\n      //       done();\r\n      //     });\r\n      // });\r\n\r\n      // view a specific car test\r\n      it('Should get a specific car', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get(`/api/v1/car/${carAd.id}`)\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.car).to.be.an('object');\r\n            expect(res.body.car.id).to.be.a('number');\r\n            expect(res.body.car.created_on).to.be.a('string');\r\n            expect(res.body.car.manufacturer).to.be.a('string');\r\n            expect(res.body.car.model).to.be.a('string');\r\n            expect(res.body.car.price).to.be.a('number');\r\n            expect(res.body.car.status).to.be.a('string');\r\n            expect(res.body.car.year).to.be.a('number');\r\n            expect(res.body.car.state).to.be.a('string');\r\n            assert.strictEqual(res.statusCode, 200, 'Status code is not 200');\r\n            assert.isObject(res.body, 'Data is not an object');\r\n            assert.isObject(res.body.car, 'data is not an object');\r\n            assert.isNumber(res.body.car.id, 'ID is not a number');\r\n            assert.isString(res.body.car.created_on, 'Date is not a string');\r\n            assert.isString(res.body.car.manufacturer, 'Manufacturer is not a string');\r\n            assert.isString(res.body.car.model, 'Model is not a string');\r\n            assert.isString(res.body.car.status, 'Status is not a string');\r\n            assert.isNumber(res.body.car.price, 'Price is not a number');\r\n            assert.isString(res.body.car.state, 'State is not a string');\r\n            assert.isNumber(res.body.car.year, 'Year is not a number');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // All available cars between a price range\r\n      it('Should return all available cars between a price range', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get('/api/v1/car?status=available&min_price=100000&max_price=150000')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.data).to.be.an('array');\r\n            assert.strictEqual(res.statusCode, 200, 'Status code is not 200');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.isArray(res.body.data, 'Data is not array');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n    \r\n      // get all cars\r\n      it('Should return all cars ', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get('/api/v1/cars')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.cars).to.be.an('array');\r\n            assert.strictEqual(res.statusCode, 200, 'Status code is not 200');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.isArray(res.body.cars, 'Data is not array');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n    // available cars\r\n      it('Should return all available cars ', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get('/api/v1/car?status=available')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.data).to.be.an('array');\r\n            assert.strictEqual(res.statusCode, 200, 'Status code is not 200');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.isArray(res.body.data, 'Data is not array');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // specific manufacturer available cars\r\n      it('Should return all available cars of a specific manufacturer', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get('/api/v1/car?status=available&manufacturer=Toyota')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.data).to.be.an('array');\r\n            assert.strictEqual(res.statusCode, 200, 'Status code is not 200');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.isArray(res.body.data, 'Data is not array');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      }); \r\n\r\n      // available cars of specific state\r\n      it('Should return all available cars of a specific state', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get('/api/v1/car?status=available&state=new')\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.data).to.be.an('array');\r\n            assert.strictEqual(res.statusCode, 200, 'Status code is not 200');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.isArray(res.body.data, 'Data is not array');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n      // delete car ad test\r\n      it('Should delete an AD', (done) => {\r\n        chai\r\n          .request(app)\r\n          .delete(`/api/v1/car/${carAd.id}`)\r\n          .set({\r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjo2LCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiQXVndXN0aW4iLCJsYXN0X25hbWUiOiJBdWd1c3RpbiIsInBhc3N3b3JkIjoiJDJiJDA0JGcueXdBclRsaFBZeHZJdFdQZklZN3VBenFwV0lPOGczUkt4UTlZTHFCMTRadWk2NlZPZ2IyIiwiYWRkcmVzcyI6IjIwOCBSdWUgQktLLCBCw6gtS2xpa2FtZSIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTU2MDQ2MzA3NiwiZXhwIjoxNTYwNTQ5NDc2fQ._2-o2JmO-sk5RgVf67CKCrOytXtA0a2ZmW_kEENRA8k',\r\n          })\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.message).to.be.equal('Car deleted successfully');\r\n            expect(res.body.message).to.be.a('string');\r\n            assert.isObject(res.body, 'Response is not an object');\r\n            assert.strictEqual(res.statusCode, 200, 'Status code is not 200');\r\n            assert.isString(res.body.message, 'Data is not a string');\r\n            assert.strictEqual(res.body.message,\r\n              'Car deleted successfully',\r\n              'Data is not equal to Car deleted successfully');\r\n            assert.isNull(err, 'Expect error to not exist');\r\n            done();\r\n          });\r\n      });\r\n\r\n     // update car price test\r\n    //  it('Should update car AD price', (done) => {\r\n    //   chai\r\n    //     .request(app)\r\n    //     .patch(`/api/v1/car/${carAd.id}/price`)\r\n    //     .set({\r\n    //       'Content-Type': 'application/json',\r\n    //       Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjoyLCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoibmV2aWxsZSIsImxhc3RfbmFtZSI6IkF1Z3VzdGluIiwicGFzc3dvcmQiOiIkMmIkMDQkU3kxbjM3RERIREZTdkRycERqNmczZThUVENocFlDOTNRbFc2Ylp2TGxxZFFVSW9RVDIzTXEiLCJhZGRyZXNzIjoiMjA4IFJ1ZSBCS0ssIELDqC1LbGlrYW1lIiwiaXNfYWRtaW4iOmZhbHNlfSwiaWF0IjoxNTYwMDc2NzAxLCJleHAiOjE1NjAwODAzMDF9.ddUzMskJPFICKdfrUuhZwHfMvVGlgud2M_TgrApbMnw',\r\n    //     })\r\n    //     .send({\r\n    //       price: 8000\r\n    //     })\r\n    //     .end((err, res) => {\r\n    //         expect(res.statusCode).to.equal(200);\r\n    //         expect(res.body.status).to.equal(200);\r\n    //         expect(res.body).to.be.an('object');\r\n    //         expect(res.body.car).to.be.an('object');\r\n    //         expect(res.body.car.id).to.be.a('number');\r\n    //         expect(res.body.car.created_on).to.be.a('string'); \r\n    //         expect(res.body.car.state).to.be.a('string');\r\n    //         expect(res.body.car.status).to.be.a('string');\r\n    //         expect(res.body.car.price).to.equal(8000);\r\n    //         expect(res.body.car.manufacturer).to.be.a('string'); \r\n    //         expect(res.body.car.model).to.be.a('string');\r\n    //         expect(res.body.car.year).to.be.a('number');\r\n    //         assert.strictEqual(res.statusCode, 200, 'status code is not 201');\r\n    //         assert.strictEqual(res.status, 200, 'status is not 201');\r\n    //         assert.isObject(res.body, 'response is not an object');\r\n    //         assert.isObject(res.body.car, 'car is not an object');\r\n    //         assert.isNumber(res.body.car.id, 'id is not a number');\r\n    //         assert.isString(res.body.car.created_on, 'date is not a string');\r\n    //         assert.isString(res.body.car.state, 'state is not a string');\r\n    //         assert.isString(res.body.car.status, 'status is not a string');\r\n    //         assert.strictEqual(res.body.car.price, 8000, 'price is not equal 8000'); \r\n    //         assert.isString(res.body.car.manufacturer, 'manufacturer is not a string');\r\n    //         assert.isString(res.body.car.model, 'model is not a string');\r\n    //         assert.isNumber(res.body.car.year, 'year is not a number');\r\n    //         assert.isNull(err, 'Expect error to not exist');\r\n    //         done();\r\n    //     });\r\n    // });\r\n  \r\n    // it('Should update car AD status', (done) => {\r\n    //   chai\r\n    //     .request(app)\r\n    //     .patch(`/api/v1/car/${carAd.id}/status`)\r\n    //     .set({\r\n    //       'Content-Type': 'application/json',\r\n    //       Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuZXdVc2VyIjp7ImlkIjoyLCJlbWFpbCI6Im5lbGltYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoibmV2aWxsZSIsImxhc3RfbmFtZSI6IkF1Z3VzdGluIiwicGFzc3dvcmQiOiIkMmIkMDQkU3kxbjM3RERIREZTdkRycERqNmczZThUVENocFlDOTNRbFc2Ylp2TGxxZFFVSW9RVDIzTXEiLCJhZGRyZXNzIjoiMjA4IFJ1ZSBCS0ssIELDqC1LbGlrYW1lIiwiaXNfYWRtaW4iOmZhbHNlfSwiaWF0IjoxNTYwMDc2NzAxLCJleHAiOjE1NjAwODAzMDF9.ddUzMskJPFICKdfrUuhZwHfMvVGlgud2M_TgrApbMnw',\r\n    //     })\r\n    //     .send({\r\n    //       status: 'sold'\r\n    //     })\r\n    //     .end((err, res) => {\r\n    //       expect(res.statusCode).to.equal(200);\r\n    //       expect(res.body).to.be.an('object');\r\n    //       expect(res.body.status).to.be.equal(200);\r\n    //       expect(res.body.data.id).to.be.a('number');\r\n    //       expect(res.body.data.created_on).to.be.a('string');\r\n    //       expect(res.body.data.manufacturer).to.be.a('string');\r\n    //       expect(res.body.data.model).to.be.a('string');\r\n    //       expect(res.body.data.price).to.be.a('number');\r\n    //       expect(res.body.data.state).to.be.a('string');\r\n    //       expect(res.body.data.status).to.equal('sold');\r\n    //       expect(res.body.data.year).to.be.a('number');\r\n    //       assert.strictEqual(res.statusCode, 200, 'Status code is not 200');\r\n    //       assert.strictEqual(res.body.status, 200, 'Status is not 200');\r\n    //       assert.isObject(res.body, 'Response is not an object');\r\n    //       assert.isObject(res.body.data, 'Data is not an object');\r\n    //       assert.isNumber(res.body.data.id, 'ID is not a number');\r\n    //       assert.isString(res.body.data.created_on, 'Date is not a string');\r\n    //       assert.isString(res.body.data.manufacturer, 'Manufacturer is not a string');\r\n    //       assert.isString(res.body.data.model, 'Model is not a string');\r\n    //       assert.strictEqual(res.body.data.status, 'sold', 'Status is not sold');\r\n    //       assert.isNumber(res.body.data.price, 'Price is not a number');\r\n    //       assert.isString(res.body.data.state, 'State is not a string');\r\n    //       assert.isNumber(res.body.data.year, 'Year is not a number');\r\n    //       assert.isNull(err, 'Expect error to not exist');\r\n    //       done();\r\n    //     });\r\n    // });\r\n  \r\n    \r\n})"]}