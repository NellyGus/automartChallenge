{"version":3,"sources":["../../server/middlewares/valid_car.js"],"names":["valid_car","request","response","next","body","state","manufacturer","model","year","trim","replace","parseInt","status","send","error","split","some","Number","isInteger","x","toString","length"],"mappings":";;;;;AAAA,IAAMA,YAAY,SAAZA,SAAY,CAACC,OAAD,EAAUC,QAAV,EAAoBC,IAApB,EAA6B;AAAA,wBAGxCF,QAAQG,IAHgC;AAAA,QAEvCC,KAFuC,iBAEvCA,KAFuC;AAAA,QAEhCC,YAFgC,iBAEhCA,YAFgC;AAAA,QAElBC,KAFkB,iBAElBA,KAFkB;AAAA,QAEXC,IAFW,iBAEXA,IAFW;;;AAK3CH,YAAOA,MAAMI,IAAN,GAAaC,OAAb,CAAqB,MAArB,EAA6B,EAA7B,CAAP;AACAJ,mBAAcA,aAAaG,IAAb,GAAoBC,OAApB,CAA4B,MAA5B,EAAoC,EAApC,CAAd;AACAH,YAAOA,MAAME,IAAN,GAAaC,OAAb,CAAqB,MAArB,EAA6B,EAA7B,CAAP;AACAF,WAAMG,SAASH,IAAT,EAAe,EAAf,CAAN;;AAEA,QAAG,CAACH,KAAJ,EAAU;AACN,eAAOH,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC7BD,oBAAQ,GADqB;AAE7BE,mBAAO;AAFsB,SAA1B,CAAP;AAIH;AACD,QAAGT,MAAMU,KAAN,CAAY,EAAZ,EAAgBC,IAAhB,CAAqB;AAAA,eAAKC,OAAOC,SAAP,CAAiBP,SAASQ,CAAT,EAAY,EAAZ,CAAjB,CAAL;AAAA,KAArB,CAAH,EAAgE;AAC5D,eAAOjB,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC7BD,oBAAO,GADsB;AAE7BE,mBAAO;AAFsB,SAA1B,CAAP;AAIH;AACD,QAAG,CAACR,YAAJ,EAAiB;AACb,eAAOJ,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC7BD,oBAAQ,GADqB;AAE7BE,mBAAO;AAFsB,SAA1B,CAAP;AAIH;AACD,QAAGR,aAAaS,KAAb,CAAmB,EAAnB,EAAuBC,IAAvB,CAA4B;AAAA,eAAKC,OAAOC,SAAP,CAAiBP,SAASQ,CAAT,EAAY,EAAZ,CAAjB,CAAL;AAAA,KAA5B,CAAH,EAAuE;AACnE,eAAOjB,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC7BD,oBAAQ,GADqB;AAE7BE,mBAAO;AAFsB,SAA1B,CAAP;AAIH;AACD,QAAG,CAACP,KAAJ,EAAU;AACN,eAAOL,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC7BD,oBAAQ,GADqB;AAE7BE,mBAAO;AAFsB,SAA1B,CAAP;AAIH;AACD,QAAGN,KAAKY,QAAL,GAAgBC,MAAhB,GAAyB,CAAzB,IAA8Bb,KAAKY,QAAL,GAAgBC,MAAhB,GAAyB,CAAvD,IAA4D,CAACb,IAAhE,EAAqE;AACjE,eAAON,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC7BD,oBAAQ,GADqB;AAE7BE,mBAAO;AAFsB,SAA1B,CAAP;AAIH;AACD,QAAG,CAACN,IAAJ,EAAS;AACL,eAAON,SAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC7BD,oBAAQ,GADqB;AAE7BE,mBAAO;AAFsB,SAA1B,CAAP;AAIH;;AAED,WAAOX,MAAP;AACH,CAtDD;kBAuDeH,S","file":"valid_car.js","sourcesContent":["const valid_car = (request, response, next) => {\r\n    let {\r\n        state, manufacturer, model, year\r\n    }= request.body;\r\n\r\n    state= state.trim().replace(/\\s+/g, '');\r\n    manufacturer= manufacturer.trim().replace(/\\s+/g, '');\r\n    model= model.trim().replace(/\\s+/g, '');\r\n    year= parseInt(year, 10);\r\n\r\n    if(!state){\r\n        return response.status(400).send({\r\n            status: 400,\r\n            error: 'Car state is required'\r\n        });\r\n    }\r\n    if(state.split('').some(x => Number.isInteger(parseInt(x, 10)))){\r\n        return response.status(400).send({\r\n            status:400,\r\n            error: 'Car state cannot contain number'\r\n        });\r\n    }\r\n    if(!manufacturer){\r\n        return response.status(400).send({\r\n            status: 400,\r\n            error: 'Car manufacturer is required'\r\n        });\r\n    }\r\n    if(manufacturer.split('').some(x => Number.isInteger(parseInt(x, 10)))){\r\n        return response.status(400).send({\r\n            status: 400,\r\n            error: 'car manufacturer cannot contain number'\r\n        });\r\n    }\r\n    if(!model){\r\n        return response.status(400).send({\r\n            status: 400,\r\n            error: 'Car model is required'\r\n        });\r\n    }\r\n    if(year.toString().length < 4 || year.toString().length > 4 || !year){\r\n        return response.status(400).send({\r\n            status: 400,\r\n            error: 'Enter a valid year, please'\r\n        });\r\n    }\r\n    if(!year){\r\n        return response.status(400).send({\r\n            status: 400,\r\n            error: 'Enter a valid year, please'\r\n        });\r\n    }\r\n\r\n    return next();\r\n}\r\nexport default valid_car;"]}